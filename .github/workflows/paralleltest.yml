name: Run AQAvit Paralleltest

on:
  workflow_dispatch: # Allows the job to be manually triggered
    inputs:
      customizedSdkUrl:
        description: SDK URL
        required: true
      aqatest-repo:
        description: adoptium/aqa-tests repository
        required: true
        type: string
        default: 'adoptium/aqa-tests:v0.9.7-release'
      testImage:
        description: Native Libs URL
        required: true
      system:
        description: System being tested
        required: true
      pool:
        description: agent pool
        required: true
        type: string
        default: None
      testLists:
        description: Number of testLists to generate
        required: false
        default: 4

env:  # Links to the JDK build under test and the native test libs
  USE_TESTENV_PROPERTIES: true

jobs:
  configuration:
    runs-on: ubuntu-latest
    outputs:
      agent-config: ${{ steps.configuration.outputs.config }}
      testLists: ${{ steps.configuration.outputs.testConfig }}
    steps:
      - name: Configuration
        id: configuration
        shell: python
        run: |
          import os
          import json

          github_runner = None
          num_lists = ${{ inputs.testLists }}
          test_lists = []

          # Choose an agent based on the system being tested default to input parameter if nothing matches
          if "windows-x64" in '${{ inputs.pool }}' or "windows-arm64" in '${{ inputs.pool }}' or "linux-x64" in '${{ inputs.pool }}' or "linux-arm64" in '${{ inputs.pool }}':
            github_runner = f"config=['self-hosted', '1ES.Pool=${{ inputs.pool }}']"
          elif "macos-x64" in '${{ inputs.pool }}':
            github_runner = "config='macos-11'"
          elif "macos-arm64" in '${{ inputs.pool }}':
            github_runner = "config=['self-hosted', 'macOS', 'ARM64']"
          else:
            github_runner = "config='${{ inputs.pool }}'"

          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            print(github_runner, file=fh)

          # Generate the test lists
          for list in range(num_lists):
            test_lists.append(f"testList_{list}")

          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            print(f"testConfig={json.dumps(test_lists)}", file=fh)

  setup-parallel:
    runs-on: ${{ fromJSON(needs.configuration.outputs.agent-config) }}
    name: Generate AQA parallelList - ${{ inputs.system }}_${{ matrix.suite }}
    needs: configuration
    strategy:
      fail-fast: true
      matrix:
        suite: [functional, openjdk, system, perf]
    steps:
      - name: Setup windows environment
        working-directory: ${{ github.workspace }}
        if: ${{ inputs.system == 'windows' }}
        shell: powershell
        run: |
          curl.exe -o windows-binaries.zip -L "${{ secrets.BASE_CONTAINER_URL }}${{ inputs.customizedSdkUrl }}?${{ secrets.SAS_TOKEN }}"
          Expand-Archive .\windows-binaries.zip .\tmp
          $jdk_directory = Get-ChildItem .\tmp\
          $jdk_directory = $jdk_directory.Basename
          $jdk_directory = "${{ github.workspace }}\tmp\$jdk_directory"
          echo "TEST_JDK_HOME=$jdk_directory" >> $env:GITHUB_ENV

      - name: Setup non-windows environment
        working-directory: ${{ github.workspace }}
        if: ${{ inputs.system != 'windows' }}
        shell: bash
        run: |
          curl -LJSks -o ${{ inputs.system }}-binaries.tar.gz "${{ secrets.BASE_CONTAINER_URL }}${{ inputs.customizedSdkUrl }}?${{ secrets.SAS_TOKEN }}"
          mkdir tmp && tar -xzf ${{ inputs.system }}-binaries.tar.gz -C ./tmp
          jdk_directory=$(ls ./tmp)
          echo "TEST_JDK_HOME=${{ github.workspace }}/tmp/$jdk_directory" >> $GITHUB_ENV

      - name: Generate parallelList - ${{ matrix.suite }}
        uses: adoptium/run-aqa@v2.0.1
        with:
          jdksource: 'customized'
          aqa-testsRepo: ${{ inputs.aqatest-repo }}
          build_list: ${{ matrix.suite }}
          target: ${{ matrix.suite }} # parallellist to generate
          run_parallel: true
          num_machines: ${{ inputs.testLists }}

      - name: Archive parallelList - ${{ matrix.suite }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.suite }}-parallelList.mk
          path: ${{ github.workspace }}/aqa-tests/TKG/parallelList.mk

  run-aqa-parallel:
    runs-on: ${{ fromJSON(needs.configuration.outputs.agent-config) }}
    needs: [setup-parallel, configuration]
    name: Run AQAvit verification ${{ inputs.system }} - _${{ matrix.suite }}.${{ matrix.test_list }}
    strategy:
      fail-fast: false
      matrix:
        test_list: ${{ fromJSON(needs.configuration.outputs.testLists) }}
        suite: [functional, openjdk, system, perf]
    steps:
      - name: Download parallelList - ${{ matrix.suite }}
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.suite }}-parallelList.mk
          path: ./

      - name: Setup windows environment
        working-directory: ${{ github.workspace }}
        if: ${{ inputs.system == 'windows' }}
        shell: powershell
        run: |
          curl.exe -o windows-binaries.zip -L "${{ secrets.BASE_CONTAINER_URL }}${{ inputs.customizedSdkUrl }}?${{ secrets.SAS_TOKEN }}"
          Expand-Archive .\windows-binaries.zip .\tmp
          $jdk_directory = Get-ChildItem .\tmp
          $jdk_directory = $jdk_directory.Basename
          $jdk_directory = "${{ github.workspace }}\tmp\$jdk_directory"
          echo "TEST_JDK_HOME=$jdk_directory" >> $env:GITHUB_ENV

          curl.exe -o jdk-native-libs.zip -L "${{ secrets.BASE_CONTAINER_URL }}${{ inputs.testImage }}?${{ secrets.SAS_TOKEN }}"
          Expand-Archive .\jdk-native-libs.zip .\tmp-libs
          $jdk_testimage = Get-ChildItem .\tmp-libs
          $jdk_testimage = $jdk_testimage.Basename
          $jdk_testimage = "${{ github.workspace }}\tmp-libs\$jdk_testimage"
          echo "TESTIMAGE_PATH=$jdk_testimage" >> $env:GITHUB_ENV

      - name: Setup non-windows environment
        working-directory: ${{ github.workspace }}
        if: ${{ inputs.system == 'linux' || inputs.system == 'macos' }}
        shell: bash
        run: |
          curl -LJSks -o ${{ inputs.system }}-binaries.tar.gz "${{ secrets.BASE_CONTAINER_URL }}${{ inputs.customizedSdkUrl }}?${{ secrets.SAS_TOKEN }}"
          mkdir tmp && tar -xzf ${{ inputs.system }}-binaries.tar.gz -C ./tmp
          jdk_directory=$(ls ./tmp)
          echo "TEST_JDK_HOME=${{ github.workspace }}/tmp/$jdk_directory" >> $GITHUB_ENV

          curl -LJSks -o jdk-native-libs.tar.gz "${{ secrets.BASE_CONTAINER_URL }}${{ inputs.testImage }}?${{ secrets.SAS_TOKEN }}"
          mkdir ./tmp-libs && tar xvf jdk-native-libs.tar.gz -C ./tmp-libs
          file_name=$(ls ./tmp-libs)
          jdk_path="${{ github.workspace }}/tmp-libs/$file_name"
          echo "TESTIMAGE_PATH=$jdk_path" >> $GITHUB_ENV

      # Linux specific config for openjdk test suite
      - name: Configure linux
        if: ${{ inputs.system == 'linux' }}
        shell: bash
        run: |
          Xvfb :1 -screen 0 1024x768x16 &

      - name: Run AQA tests parallel ${{ inputs.system }}_${{ matrix.suite }}_${{ matrix.test_list }}
        uses: adoptium/run-aqa@v2.0.1
        with:
          jdksource: 'customized'
          aqa-testsRepo: ${{ inputs.aqatest-repo }}
          build_list: ${{ matrix.suite }}
          target : -f parallelList.mk ${{ matrix.test_list }}

      - uses: actions/upload-artifact@v2
        if: always() # Always run this step (even if the tests failed)
        with:
          name: test_output_${{ matrix.suite }}_${{ matrix.test_list }}
          path: ./**/output_*/*.tap
